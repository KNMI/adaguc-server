<?xml version="1.0" encoding="UTF-8"?>
<Configuration>


  <!-- How to render windbarbs from point data, like CSV, NetCDF or GeoJSON-->
  <Style name="windbarbs_kts_shaded_withbarbs_for_points">
    <Vector vectorstyle="barb" linecolor="#0000FF"  plotvalue="true" />
    <RenderMethod>point</RenderMethod>
  </Style>

  <Style name="windbarbs_kts_shaded_withbarbs_for_points_differentoptions">
    <Vector max="1" vectorstyle="barb" outlinewidth="5"  linewidth="2" outlinecolor="#000000ff" linecolor="#00FF00"  plotvalue="false" />
    <Vector min="1" max="10" vectorstyle="barb" linecolor="#0000FF"  plotvalue="true" />
    <Vector min="10" max="15" vectorstyle="barb" outlinewidth="0" linewidth="3" linecolor="#000000" plotvalue="true" textcolor="#111111"/>    
    <Vector min="15" vectorstyle="barb" outlinewidth="15" outlinecolor="#FFFFFF" linewidth="1" linecolor="#FF1111" plotvalue="false" textcolor="#FF1111"/>    
    <RenderMethod>point</RenderMethod>
  </Style>
  
  
  <Style name="windvector">
    <Legend fixedclasses="true" tickinterval="2" tickround="1">no2</Legend>
    <Min>0.0</Min>
    <Max>10</Max>
    <Vector vectorstyle="vector" linecolor="#0000FF" />
    <RenderMethod>point</RenderMethod>
  </Style>
  
  <Layer type="database">
    <FilePath filter="^.*\.csv$">{ADAGUC_PATH}/data/datasets/csv_wind/csvexample_windbarbs.csv</FilePath>
    <Name>example_windbarbs_from_pointdata_csv</Name>
    <Title>Wind barbs from point csv data</Title>
    <Variable>ff</Variable>
    <Variable>dd</Variable>
    <Styles>windbarbs_kts_shaded_withbarbs_for_points,windbarbs_kts_shaded_withbarbs_for_points_differentoptions,windvector</Styles>
  </Layer>

  <!-- How to render windbarbs from grids, like gridded NetCDF data -->

  <Style name="windbarbs_kts_shaded_withbarbs_for_grids">
    <ShadeInterval min="0" max="0.3"     label=" 0  [  &lt; 0 kts] (&lt; 0.3 m/s)" fillcolor="#9600fe"/>
    <ShadeInterval min="0.3" max="1.6"   label=" 1  [  1-3 kts  ] (0.3-1.6 m/s)" fillcolor="#9600fe"/>
    <ShadeInterval min="1.6" max="3.4"   label=" 2  [  4-6 kts  ] (1.6-3.4 m/s)" fillcolor="#0064fe"/>
    <ShadeInterval min="3.4" max="5.5"   label=" 3  [  7-10 kts ] (3.4-5.5 m/s)" fillcolor="#00c8fe"/>
    <ShadeInterval min="5.5" max="8.0"   label=" 4  [ 11-16 kts ] (5.5-8.0 m/s)" fillcolor="#25c192"/>
    <ShadeInterval min="8.0" max="10.8"  label=" 5  [ 17-21 kts ] (8.0-10.8 m/s)" fillcolor="#00e600"/>
    <ShadeInterval min="10.8" max="13.9" label=" 6  [ 22-27 kts ] (10.8-13.9 m/s)" fillcolor="#00fa00"/>
    <ShadeInterval min="13.9" max="17.2" label=" 7  [ 28-33 kts ] (13.9-17.2 m/s)" fillcolor="#feae00"/>
    <ShadeInterval min="17.2" max="20.8" label=" 8  [ 34-40 kts ] (17.2-20.8 m/s)" fillcolor="#b40032"/>
    <ShadeInterval min="20.8" max="24.5" label=" 9  [ 41-47 kts ] (20.8-24.5 m/s)" fillcolor="#fE0096"/>
    <ShadeInterval min="24.5" max="200"  label="10 [  &gt;48 kts ] (&gt;24.5 m/s)" fillcolor="#420027"/>

    <Vector  min="0" max="1"     vectorstyle="barb" linewidth="2" linecolor="#FFFFFF" plotvalue="false" outlinewidth="1.6" outlinecolor="#000000" />
    <Vector min="1" max="3.4"      vectorstyle="barb" linewidth="0" linecolor="#000000" plotvalue="true" />
    <Vector min="3.4" max="8"      vectorstyle="barb" linewidth="3" linecolor="#FFFF00" plotvalue="true" />
    <Vector min="8" max="10.8"     vectorstyle="barb" linewidth="1.5" outlinewidth="4" fontsize="15" outlinecolor="#000000"  linecolor="#FFFFFF" plotvalue="true" textcolor="#FFFFFF" />
    <Vector min="10.8" max="13.9"  vectorstyle="barb" linewidth="0" linecolor="#00FF00" plotvalue="true" textcolor="#111111"/>
    <Vector min="13.9"             vectorstyle="barb" linewidth="0" linecolor="#00FF00" plotvalue="true" textcolor="#111111"/>

    <RenderSettings renderhint="discreteclasses" />

    <!-- 
      Extracts point from a grid and makes them available for the point renderer
      - select: Which data objects to sample from the Layer
      - a: Optionally apply thinning in pixels, points will be no closer than a pixels in the GetMap response.
    -->
    <DataPostProc algorithm="pointsfromgrid" select="speed_component,direction_component" a="50"/>

    <!-- 
      Use combination of nearest renderer and point renderer to render the windbarbs 
      - nearest will render the grid via adagucserverEC/CImgWarpNearestNeighbour
      - point will render the points via adagucserverEC/CImgRenderers/CImgRenderPoints
    -->
    <RenderMethod>nearestpoint</RenderMethod>
  </Style>


  <Style name="winddiscs_for_grids">
    <Vector vectorstyle="disc" linewidth="1" textcolor="#FFFFFF" fontsize="9" />
    <DataPostProc algorithm="pointsfromgrid" select="speed_component,direction_component" a="50"/>
    <RenderMethod>point</RenderMethod>
  </Style>

  <Style name="windarrows_for_grids">
    <Vector max="5" vectorstyle="vector" linewidth="2"  linecolor="#FFFF00"  scale="7" plotvalue="true" textcolor="#000000"/>
    <Vector min="5" max="7" vectorstyle="vector" linewidth="3" linecolor="#ff7b00ff" scale="7"  plotvalue="true" textcolor="#000000" />
    <Vector min="7" vectorstyle="vector" linewidth="5" linecolor="#FF0000" scale="7" />
    <DataPostProc algorithm="pointsfromgrid" select="speed_component,direction_component" a="50"/>
    <RenderMethod>point</RenderMethod>
  </Style>


  <Layer type="database">
    <Name>example_windbarbs_on_gridded_netcdf</Name>
    <Title>Wind barbs from gridded model data</Title>
    <Variable>x_wind__at_10m</Variable>
    <Variable>y_wind__at_10m</Variable>
    <FilePath filter="">{ADAGUC_PATH}data/datasets/harmonie_wind_grid_30x30.nc</FilePath>
    <Dimension name="time" units="ISO8601" default="min">time</Dimension>
    <Dimension name="forecast_reference_time" units="ISO8601">reference_time</Dimension>
    <Styles>windbarbs_kts_shaded_withbarbs_for_grids,winddiscs_for_grids,windarrows_for_grids</Styles>
    <!-- 
      convert_uv_components is a data postprocessor to transform grid relative x and y components of a vector to relative to north components. This uses a jacobian transformation.
      This processor will add four more dataobjects to the datasource. The two original components are now last. The new one dataobjects are:
      - `speed_component`: based on the magnitude of the eastward_wind and northward_wind components
      - `direction_component`: based on the direction of the eastward_wind and northward_wind components
      - `eastward_component`: based on the original x and y components. Corrected using jacobian transformation
      - `northward_component`: based on the original x and y components. Corrected using jacobian transformation
    -->
    <DataPostProc algorithm="convert_uv_components"/>
  </Layer>

  <!-- End of configuration /-->
</Configuration>
